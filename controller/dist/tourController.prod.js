"use strict";function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var r=[],a=!0,n=!1,s=void 0;try{for(var o,i=e[Symbol.iterator]();!(a=(o=i.next()).done)&&(r.push(o.value),!t||r.length!==t);a=!0);}catch(e){n=!0,s=e}finally{try{a||null==i.return||i.return()}finally{if(n)throw s}}return r}}function _arrayWithHoles(e){if(Array.isArray(e))return e}var multer=require("multer"),sharp=require("sharp"),Tour=require("./../models/tourModel"),catchAsync=require("./../utils/catchAsync"),AppError=require("./../utils/appError"),factory=require("./handlerFactory"),multerStorage=multer.memoryStorage(),multerFilter=function(e,t,r){t.mimetype.startsWith("image")?r(null,!0):r(new AppError("Not an image! Please upload only images.",400),!1)},upload=multer({storage:multerStorage,fileFilter:multerFilter});exports.uploadTourImages=upload.fields([{name:"imageCover",maxCount:1},{name:"images",maxCount:3}]),exports.resizeTourImages=catchAsync(function(n,e,t){var s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(console.log(n.files),n.files.imageCover&&n.files.images){e.next=3;break}return e.abrupt("return",t());case 3:return s="tours-".concat(n.params.id,"-").concat(Date.now(),"-cover.jpeg"),e.next=6,regeneratorRuntime.awrap(sharp(n.file.imageCover[0].buffer).resize(2e3,1333).toFormat("jpeg").jpeg({quality:90}).toFile("public/img/tours/".concat(s)));case 6:return n.body.imageCover=s,n.body.images=[],e.next=10,regeneratorRuntime.awrap(Promise.all(n.files.images.map(function(t,r){var a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return a="tour-".concat(n.params.id,"-").concat(Date.now(),"-").concat(r+1,".jpeg"),e.next=3,regeneratorRuntime.awrap(sharp(t.buffer).resize(2e3,1333).toFormat("jpeg").jpeg({quality:90}).toFile("public/img/tours/".concat(s)));case 3:n.body.images.push(a);case 4:case"end":return e.stop()}})})));case 10:t();case 11:case"end":return e.stop()}})}),exports.aliasTopTours=function(e,t,r){e.query.limit="5",e.query.sort="-ratingsAverage,price",r()},exports.getAllTours=factory.getAll(Tour),exports.createTour=factory.createOne(Tour),exports.getTour=factory.getOne(Tour),exports.updateTour=factory.updateOne(Tour),exports.deleteTour=factory.deleteOne(Tour),exports.getTourStats=catchAsync(function(e,t){var r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(Tour.aggregate([{$match:{ratingsAverage:{$gte:4.5}}},{$group:{_id:null,numTours:{$sum:1},numRatings:{$sum:"$ratingsQuality"},avgRating:{$avg:"$ratingsAverage"},avgPrice:{$avg:"$price"},minPrice:{$min:"$price"},maxPrice:{$max:"$price"}}}]));case 2:r=e.sent,t.status(200).json({status:"Success",message:"Stats Down Below:- ",data:{stats:r}});case 4:case"end":return e.stop()}})}),exports.getMonthlyPlan=catchAsync(function(t,r){var a,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return a=1*t.params.year,e.next=3,regeneratorRuntime.awrap(Tour.aggregate([{$unwind:"$startDates"},{$match:{startDates:{$gte:new Date("".concat(a,"-01-01")),$lte:new Date("".concat(a,"-12-31"))}}},{$group:{_id:{$month:"$startDates"},numTourStarts:{$sum:1},tours:{$push:"$name"}}},{$addFields:{month:"$_id"}},{$project:{_id:0}},{$sort:{numTourStarts:-1}},{$limit:12}]));case 3:n=e.sent,r.status(200).json({status:"Success",message:"Plan Down Below:- ",data:{plan:n}});case 5:case"end":return e.stop()}})}),exports.getToursWithin=catchAsync(function(t,r,a){var n,s,o,i,u,c,l,p,g,m;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.params,s=n.distance,o=n.latlng,i=n.unit,u=o.split(","),c=_slicedToArray(u,2),l=c[0],p=c[1],g="mi"===i?s/3963.2:s/6378.1,l&&p||a(new AppError("Please provide latitude and longitudes.",400)),e.next=6,regeneratorRuntime.awrap(Tour.find({startLocation:{$geoWithin:{$centerSphere:[[p,l],g]}}}));case 6:m=e.sent,r.status(200).json({status:"success",results:m.length,data:{data:m}});case 8:case"end":return e.stop()}})}),exports.getDistances=catchAsync(function(t,r,a){var n,s,o,i,u,c,l,p,g;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.params,s=n.latlng,o=n.unit,i=s.split(","),u=_slicedToArray(i,2),c=u[0],l=u[1],p="mi"===o?621371e-9:.001,c&&l||a(new AppError("Please provide latitude and longitudes.",400)),e.next=6,regeneratorRuntime.awrap(Tour.aggregate([{$geoNear:{near:{type:"Point",coordinates:[1*l,1*c]},distanceField:"distance",distanceMultiplier:p}},{$project:{distance:1,name:1}}]));case 6:g=e.sent,r.status(200).json({status:"success",results:g.length,data:{data:g}});case 8:case"end":return e.stop()}})});